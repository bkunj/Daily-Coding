Q.) 463. Island Perimeter
Link: https://leetcode.com/problems/island-perimeter/description/ 
Solution:
M-1) iterative:
     0 1 2 3 
 ----------------
   0|0 1 0 0
   1|1 1 1 0
   2|0 1 0 0
   3|1 1 0 0

4(0,1) check if(0,0)==1(no), (0,2)==1(no), (1,1)==1(yes) then 4-1 = 3;
+ 4(1,0) check if(0,0)==1,(1,1)==1(yes) then 4-1 = 3, (2,0)==1(no);
+ 4(1,1) check if(0,1)==1(yes) then = 4-1=3,(1,0)==1(yes) then 3-1=2, (1,2)==1(yes) then 2-1 = 1
                        , (2,1)==1(yes) then 1-1=0;
+ 4(1,2) check if(1,1)==1(yes) then 4-1=3, others no;
+ 4(2,1) check if(1,1)==1(yes) then 4-1=3, (3,1)==1(yes) then 3-1=2, others no;
+ 4(3,0) check if(3,1)==1(yes) then 4-1=3, others no;
+ 4(3,1) check if(3,0)==1(yes) then 4-1=3, (2,1)==1(yes) then 3-1=2. others no;

total = 3+3+0+3+2+3+2=16 (Answer).

or simply use count where conflict occur then count = 12. 
then Answer = total-count = 28-12 = 16 (Answer).
CODE:
class Solution {
    private static int conflictCount(int[][] grid, int i, int j){
        int count = 0;
        if(i-1>=0){
            if(grid[i-1][j]==1) count++;
        }
        if(i+1<grid.length){
            if(grid[i+1][j]==1) count++;
        }
        if(j-1>=0){
            if(grid[i][j-1]==1) count++;
        }
        if(j+1<grid[0].length){
            if(grid[i][j+1]==1) count++;
        }
        return count;
    }
    public int islandPerimeter(int[][] grid) {
        int totalCount = 0;
        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[0].length;j++){
                if(grid[i][j]==1){
                    totalCount+=4;
                    totalCount-=conflictCount(grid,i,j);
                }
            }
        }
        return totalCount;
    }
}
Time complexity: O(N*M), Space Complexity: O(1).
=================================================
M-2) 
--> As soon as I get to one island --> from there apply the DFS algorithm.
CODE:
class Solution {
    int m;
    int n;
    int peri;
    void dfs(int[][] grid, int i, int j) {
        if(i < 0 || i >= m || j < 0 || j >= n || grid[i][j] == 0) {
            peri++;
            return;
        }
        
        if(grid[i][j] == -1) {
            return;
        }
        
        grid[i][j] = -1; // mark visited 

        dfs(grid, i+1, j);
        dfs(grid, i-1, j);
        dfs(grid, i, j+1);
        dfs(grid, i, j-1);
    }
    int islandPerimeter(int[][] grid) {
        m = grid.length;
        n = grid[0].length;
        peri = 0;
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(grid[i][j] == 1) {
                    dfs(grid, i, j);
                    return peri;
                }
            }
        }
        return -1;
    }
}
Time complexity: O(N*M), Space Complexity: O(1) Auxiliary space, recursive system stack space = O(number of 1â€™s in grid)
==================================================
M-3)
--> As soon as you get to one island --> from there apply the BFS algorithm.
class Solution {
    int m;
    int n;
    int[][] directions = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
    int bfs(int[][] grid, int i, int j) {
        int perim = 0;
        Queue<int[]> queue = new LinkedList<>();
        queue.offer(new int[]{i, j});
        grid[i][j] = -1;
        
        while (!queue.isEmpty()) {
            int[] it = queue.poll();
            
            for (int[] dir : directions) {
                int i_ = it[0] + dir[0];
                int j_ = it[1] + dir[1];
                
                if (i_ < 0 || i_ >= m || j_ < 0 || j_ >= n || grid[i_][j_] == 0)
                    perim++;
                else if (grid[i_][j_] == -1)
                    continue;
                else {
                    queue.offer(new int[]{i_, j_});
                    grid[i_][j_] = -1;
                }
            }
        }
        return perim;
    }
    int islandPerimeter(int[][] grid) {
        m = grid.length;
        n = grid[0].length;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    return bfs(grid, i, j);
                }
            }
        }
        return -1;
    }
}
Time complexity: O(N*M), Space Complexity: O(M*N)--worst case when all grids are 1.

=======================================================================================