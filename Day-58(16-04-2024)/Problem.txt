Q.) 623. Add One Row to Tree
Link: https://leetcode.com/problems/add-one-row-to-tree/description/ 
Solution:
            4 
       2          6
   3       1   5

4.left = 2
4.right = 6
temp = 4 2 6 (remove 4, but store tempNodeQueue)  l=1;
temp = 2 6   ( l = 2) check 4.left exist or not if exist then
                     v1node = 2 and 4.left = create new node
                      and add value=1 and add 1.left = v1node.
              check if 4.right exist or not if exist = v2node = 6 
              and 4.right = create new node and 
               add value = 1 and add 1.right = v2node.

then break/return (since level = 2 matches with given depth).
CODE:
class Solution {
    public TreeNode addOneRow(TreeNode root, int val, int depth) {
        if (depth == 1) {
            TreeNode newNode = new TreeNode(val);
            newNode.left = root;
            return newNode;
        }
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        int level = 1;
        while (!queue.isEmpty()) {
            int size = queue.size();
            if (level == depth - 1) {
                for (int i = 0; i < size; i++) {
                    TreeNode node = queue.poll();
                    TreeNode leftChild = new TreeNode(val);
                    TreeNode rightChild = new TreeNode(val);
                   
                    leftChild.left = node.left;
                    rightChild.right = node.right;
                   
                    node.left = leftChild;
                    node.right = rightChild;
                }
                return root;
            }
            for (int i = 0; i < size; i++) {
                TreeNode node = queue.poll();
                if (node.left != null) queue.offer(node.left);
                if (node.right != null) queue.offer(node.right);
            }
            level++;
        }
        return root;
    }
}
Time Complexity: O(N), Space Complexity: O(N).

===============================================================