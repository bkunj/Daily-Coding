Q.) 1992. Find All Groups of Farmland
Link: https://leetcode.com/problems/find-all-groups-of-farmland/description/ 
Solution:

M-1) DFS:
CODE:
class Solution {
    int m;
    int n;
    int[][] result;
    int[][] directions = {{0,1},{0,-1},{1,0},{-1,0}};
 
    public int[][] findFarmland(int[][] land) {
        m = land.length;
        n = land[0].length;
        List<int[]> resultList = new ArrayList<>();


        for(int i = 0;i<m;i++){
            for(int j=0;j<n;j++){
                if(land[i][j] == 1){
                    int r1 = i;
                    int c1 = j;
                    int[] r2c2 = dfs(land,i,j);
                    resultList.add(new int[]{r1,c1,r2c2[0],r2c2[1]});
                }
            }
        }
        result = new int[resultList.size()][];
        for(int i = 0;i<resultList.size();i++){
            result[i] = resultList.get(i);
        }
        return result;
    }


    private int[] dfs(int[][] land, int i, int j){
        land[i][j] = 0;
        int[] r2c2 = new int[]{i,j};
       
        for(int[] dir: directions){
            int i_ = i + dir[0];
            int j_ = j + dir[1];


            if (i_ >= 0 && i_ < m && j_ >= 0 && j_ < n && land[i_][j_] == 1) {
                int[] result = dfs(land,i_,j_);
                r2c2[0] = Math.max(r2c2[0], result[0]);
                r2c2[1] = Math.max(r2c2[1], result[1]);
            }
        }
        return r2c2;
    }
}
Time Complexity: O(M*N)
Space Complexity: O(1) auxiliary space, recursion system stack space O(M*N)
===================
M-2) BFS:
CODE:
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;


class Solution {
    int m;
    int n;
    List<List<Integer>> result;
    int[][] directions = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};


    public int[][] findFarmland(int[][] land) {
        m = land.length;
        n = land[0].length;
        result = new ArrayList<>();


        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (land[i][j] == 1) {
                    int r1 = i;
                    int c1 = j;
                    int[] r2c2 = new int[]{-1, -1};


                    bfs(land, i, j, r2c2);
                    result.add(List.of(r1, c1, r2c2[0], r2c2[1]));
                }
            }
        }


        return convertListToArray(result);
    }


    private void bfs(int[][] land, int i, int j, int[] r2c2) {
        Queue<int[]> queue = new LinkedList<>();
        queue.offer(new int[]{i, j});


        while (!queue.isEmpty()) {
            int[] p = queue.poll();


            r2c2[0] = Math.max(r2c2[0], p[0]);
            r2c2[1] = Math.max(r2c2[1], p[1]);


            for (int[] dir : directions) {
                int i_ = p[0] + dir[0];
                int j_ = p[1] + dir[1];


                if (i_ >= 0 && i_ < m && j_ >= 0 && j_ < n && land[i_][j_] == 1) {
                    land[i_][j_] = 0; // Mark as visited
                    queue.offer(new int[]{i_, j_});
                }
            }
        }
    }
   
    private int[][] convertListToArray(List<List<Integer>> list) {
        int[][] array = new int[list.size()][4];
        for (int i = 0; i < list.size(); i++) {
            List<Integer> sublist = list.get(i);
            for (int j = 0; j < 4; j++) {
                array[i][j] = sublist.get(j);
            }
        }
        return array;
    }
}
Time Complexity: O(M*N), Space Complexity: O(M*N)
====================
M-3) Iterative: (Greedy Approach):
CODE:
import java.util.ArrayList;
import java.util.List;


class Solution {
    public int[][] findFarmland(int[][] land) {
        int m = land.length;
        int n = land[0].length;


        List<int[]> result = new ArrayList<>();


        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (land[i][j] == 0) continue;


                // find the rightmost column of the current group
                int c1 = j;
                while (c1 < n && land[i][c1] == 1) {
                    c1++;
                }


                // find the bottommost row of the current group
                int r1 = i;
                while (r1 < m && land[r1][j] == 1) {
                    r1++;
                }


                c1 = c1 == 0 ? c1 : c1 - 1;
                r1 = r1 == 0 ? r1 : r1 - 1;


                result.add(new int[]{i, j, r1, c1});


                // mark all the in-between 1s to 0s
                for (int k = i; k <= r1; k++) {
                    for (int l = j; l <= c1; l++) {
                        land[k][l] = 0; // visited
                    }
                }
            }
        }


        return result.toArray(new int[0][]);
    }
}
Time Complexity: O(M*N), Space Complexity: O(1).
===============================================================