Depth First Search (DFS):  Three Types

Inorder Traversal  (Left Root Right)  → https://leetcode.com/problems/binary-tree-inorder-traversal/description/
Pre-Order Traversal (Root Left Right) → https://leetcode.com/problems/binary-tree-preorder-traversal/description/
Post-Order Traversal (Left Right Root) → https://leetcode.com/problems/binary-tree-postorder-traversal/description/
=================================================================
Pre-Order Traversal Using Recursive:
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    List<Integer> ans = new ArrayList<>();
    public List<Integer> preorderTraversal(TreeNode root) {
        if(root == null) return ans;
       ans.add(root.val);
       preorderTraversal(root.left);
       preorderTraversal(root.right);
       return ans;
    }
} 
T.C = O(N), S.C = O(N)(worst case, else log(N) |→ , N = no of nodes
============================================================
Pre-Order Traversal Using Iterative: Using Stack DS.

class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> ans = new ArrayList<>();
        if(root == null) return ans;


        Stack<TreeNode> stack = new Stack<>();
        stack.push(root);
        while(!stack.isEmpty()){
            root = stack.pop();
            ans.add(root.val);
            if(root.right!=null) stack.push(root.right);
            if(root.left!=null) stack.push(root.left);
        }
       return ans;
    }
}
T.C = O(N), S.C = O(N)(worst case, else log(N) |→ , N = no of nodes
==============================================================
Inorder Traversal : Using Recursion
class Solution {
    List<Integer> ans = new ArrayList<>();
    public List<Integer> inorderTraversal(TreeNode root) {
        if(root == null) return ans;
       inorderTraversal(root.left);
       ans.add(root.val);
       inorderTraversal(root.right);
       return ans;
    }
}
==========================================================
Inorder Traversal : Iterative way (Using Stack)
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> ans = new ArrayList<>();
        if(root == null) return ans;
        Stack<TreeNode> stack = new Stack<>();
        TreeNode crr = root;
        while(crr != null || !stack.isEmpty()){
            if(crr!=null){
                stack.push(crr);
                crr = crr.left;
            }
            else{
                crr = stack.pop();
                ans.add(crr.val);
                crr = crr.right;
            }
        }
       return ans;
    }
}
=================================================================
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> ans = new ArrayList<>();
        if(root == null) return ans;
        Stack<TreeNode> stack = new Stack<>();
        TreeNode curr = root;
        while (curr != null || !stack.isEmpty()) {
            while (curr != null) {
                stack.push(curr);
                curr = curr.left;
            }
            curr = stack.pop();
            ans.add(curr.val);
            curr = curr.right;
        }
        
        return ans;
    }
}

T.C = S.C = O(N).
==================================================================
Post Order Traversal: (Using Recursion)

class Solution {
    List<Integer> ans = new ArrayList<>();
    public List<Integer> postorderTraversal(TreeNode root) {
        if(root == null) return ans;
       postorderTraversal(root.left);
       postorderTraversal(root.right);
       ans.add(root.val);
       return ans;
    }
}

===============================================================================
Post Order Traversal: Iterative way (Using Stack)
Using 2 Stack:
class Solution {

    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> ans = new ArrayList<>();
        Stack<TreeNode> stack1 = new Stack<>();
        Stack<TreeNode> stack2 = new Stack<>();
        if(root == null) return ans;


        stack1.push(root);
        while(!stack1.isEmpty()){
            root = stack1.pop();
            stack2.push(root);
            if(root.left!=null) stack1.push(root.left);
            if(root.right!=null) stack1.push(root.right);
        }
        while(!stack2.isEmpty()){
            ans.add(stack2.pop().val);
        }
       return ans;
    }
}
S.C = O(2N), T.C = O(N)
==========================================================================
Using 1 Stack:
public class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> ans = new ArrayList<>();
        if (root == null) return ans;

        Stack<TreeNode> stack = new Stack<>();
        stack.push(root);

        while (!stack.isEmpty()) {
            TreeNode curr = stack.pop();
            ans.add(0, curr.val); // Add the current node's value to the beginning of the list

            // Push the left child onto the stack if it exists
            if (curr.left != null) {
                stack.push(curr.left);
            }

            // Push the right child onto the stack if it exists
            if (curr.right != null) {
                stack.push(curr.right);
            }
        }

        return ans;
    }
=====================================
public class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> ans = new ArrayList<>();
        if (root == null) return ans;

        Stack<TreeNode> stack = new Stack<>();
        stack.push(root);
        TreeNode prev = null;

        while (!stack.isEmpty()) {
            TreeNode curr = stack.peek();

            if ((curr.left == null && curr.right == null) ||
                (prev != null && (prev == curr.left || prev == curr.right))) {
                ans.add(curr.val);
                stack.pop();
                prev = curr;
            } else {
                if (curr.right != null) {
                    stack.push(curr.right);
                }
                if (curr.left != null) {
                    stack.push(curr.left);
                }
            }
        }

        return ans;
    }




