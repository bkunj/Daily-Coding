Question 1: Longest Sub-Array with Sum K
URL1: https://www.geeksforgeeks.org/problems/longest-sub-array-with-sum-k0809/1?utm_source=gfg&utm_medium=article&utm_campaign=bottom_sticky_on_article 
Solution:
BRUTE-FORCE APPROACH:
 Generating all the sub-arrays and checking the sum and then among those sums find the longest subarray.

Time Complexity: O(N*N*N) or O(N*N)
--------
OPTIMAL APPROACH: Using Hashing
Algorithm:
--> Create sum variable to find the sum till ith index.
--> Create a Map to store the sum and ith index associated with it.
--> Iterate the array and check:
   --> if sum==K ==> update longest subarray with previous max length and current length.==> which one maximum.
   --> if sum-K present in Map ==> update longest subarray with previous max length and (index-map[sum-K])==> which one maximum.
--> Then check if current sum is present in the map and leave it, otherwise put inside the map with associated index.

Time Complexity: O(N)
Space Complexity: O(N)
CODE:
class Solution{
    public static int lenOfLongSubarr (int A[], int N, int K) {
        //Complete the function
        Map<Integer,Integer> mp = new HashMap<>();
        int sum=0;
        int maxsize=0;
        //mp.put(0, -1);
        for(int i=0;i<N;i++){
            sum = sum+A[i];
            int rem = sum-K;
            if(sum==K){
                maxsize= Math.max(i+1,maxsize);
             }
            if(mp.containsKey(rem)){
                maxsize= Math.max(Math.abs(mp.get(rem)-i),maxsize);
            }
            if(!mp.containsKey(sum)){
                mp.put(sum, i);
            }
        }
        return maxsize;
    }
}
=====================================================================================================
Question 2: Search in Rotated Sorted Array
URL2: https://leetcode.com/problems/search-in-rotated-sorted-array/description/ 

Solution: 
BRUTE-FORCE APPROACH:
--> Using Linear Search. 
Time Complexity: O(N)
--------
OPTIMAL APPROACH: Using Binary Search
Idea: Since it is a rotated sorted array.
--> That means In array--> initially value will increase from 0 to ith index and then from i+1th index to N-1 value decreases.
--> Now, take two pointer l=0 and r=N-1.
traverse until l<=r
--> calculate mid = (l+r)/2
--> if arr[mid]==target then return mid.
if(nums[mid]>=nums[0]){
                if(target>nums[mid] || target<nums[0]){
                    l = mid+1;
                }
                else {
                    r = mid-1;
                }
            }
else{
                if(target<nums[mid]  || target> nums[n-1]){
                    r = mid-1;
                }
                else {
                    l = mid+1;
                }
            }

Time Complexity: O(log(N))
CODE:
class Solution {
    public int search(int[] nums, int target) {
        int n = nums.length;
        int l = 0, r = n-1;
        while(l<=r){
            int mid = l + (r-l)/2;
            if(nums[mid]==target){
                return mid;
            }
            if(nums[mid]>=nums[0]){
                if(target>nums[mid] || target<nums[0]){
                    l = mid+1;
                }
                else {
                    r = mid-1;
                }
            }
            else{
                if(target<nums[mid]  || target> nums[n-1]){
                    r = mid-1;
                }
                else {
                    l = mid+1;
                }
            }
        }
        return -1;
    }
}
