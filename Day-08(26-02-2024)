Question 1: Valid Parentheses
Link: https://leetcode.com/problems/valid-parentheses/description/ 

Ans:
Algo(1):
---------------
if string length == odd ==> return false;
for ch:s
   if open:
      push same type closing in stack
   else closing:
      if stack is empty or stack.top!=closing
         return false
       stack pop


if stack.empty
      return true
return false
---------------------------------------
Algo(2):
---------------
if string length == odd ==> return false;
for ch:s
   if open:
      push in stack
   else closing:
      if stack is empty or stack.top!=same type closing
         return false
      stack pop


if stack.empty
      return true
return false

===================
CODE:
class Solution {
    public boolean isValid(String s) {
        Stack<Character> stack = new Stack<>();
        // convert string into char array and access the characters using for each loop.
        if(s.length()%2!=0) return false;
        for(char ch: s.toCharArray())
        {
            switch (ch)
            {
                // open bracket then push it in stack.
                // close bracket then pop the item and compare.
                case '(':
                case '{':
                case '[':
                    stack.push(ch);
                    break;
                case ')':
                    if(stack.isEmpty() || stack.pop() != '(')
                    {
                        return false;
                    }
                    break;
                case '}':
                    if(stack.isEmpty() || stack.pop() != '{')
                    {
                        return false;
                    }
                    break;
                case ']':
                    if(stack.isEmpty() || stack.pop() != '[')
                    {
                        return false;
                    }
                    break;
            }
        }
        return stack.isEmpty();
    }
}

Time Complexity: O(N)
Space Complexity: O(1)

=============================================================================================================================================
Question 2: Longest Valid Parentheses
Link: https://leetcode.com/problems/longest-valid-parentheses/description/ 
Ans:

Approach
Initialize an array arr of length n, where n is the length of the input string s, filled with zeros.
Initialize an empty stack.
Iterate through each character s[i] in the input string s.
If s[i] is '(', push its index i onto the stack.
If s[i] is ')' and the stack is not empty, mark the corresponding opening parenthesis index and the current index as valid by setting arr[stack.pop()] = 1 and arr[i] = 1.
Now we need to find longest consecutive 1s in the array :)

CODE:
class Solution {
    public int longestValidParentheses(String s) {
         int n = s.length();
        int[] arr = new int[n]; // By default, all elements of the array will be initialized to 0. in java
        Stack<Integer> stack = new Stack<>();

        for (int i = 0; i < n; i++) {
            if (s.charAt(i) == '(') {
                stack.push(i);
            }
            if (s.charAt(i) == ')' && !stack.isEmpty()) {
                arr[stack.pop()] = 1;
                arr[i] = 1;
            }
        }
        int ans = 0;
        int temp = 0;
        for (int i : arr) {
            if (i == 1) {
                temp++;
                ans = Math.max(ans, temp);
            } else {
                temp = 0;
            }
        }

        return ans;
    }
}
-----------------
Time complexity: O(n)
Space complexity: O(n)
