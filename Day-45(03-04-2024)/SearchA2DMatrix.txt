Q.) Search a 2D Matrix
Link: https://leetcode.com/problems/search-a-2d-matrix/description/ 
Solution:
M-1) Brute-Force Method:
→ For each row, iterate through the column linearly and Search.
Time Complexity: O(M*N), Space Complexity: O(1).
Where, M=Row, N=Column.
============
M-2) Using Binary Search: (Since every row is sorted)
→ For Each row apply Binary Search to find the element.
Time Complexity: O(M*logN), Space Complexity: O(1).
==========
M-3) Optimal: Binary Search: (Since every row and column are sorted)
→ Apply Binary Search in both rows and columns. 
CODE:
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int rowSize = matrix.length;
        int columnSize = matrix[0].length;
        int startRow = 0;
        int endRow = rowSize-1;
        int startColumn = 0;
        int endColumn = columnSize-1;
        int ansRow = 0;


        // Handle the case where target is less than all elements in the first column
        if (target < matrix[0][0]) {
            return false;
        }
        while(startRow<=endRow){
            int mid = startRow + (endRow-startRow)/2;
            if(matrix[mid][0]>target){
                endRow = mid-1;
                ansRow = endRow;
            }
            else if(matrix[mid][0]==target){
                return true;
            }
            else{
                startRow = mid+1;
            }
        }
        ansRow = endRow;
        while(startColumn<=endColumn){
            int mid = startColumn + (endColumn-startColumn)/2;
            if(matrix[ansRow][mid]==target){
                return true;
            }
            else if(matrix[ansRow][mid]>target){
                endColumn = mid-1;
            }
            else{
                startColumn = mid+1;
            }
        }
        return false;
    }
}
Time Complexity: O(log(M*N)), Space Complexity: O(1).
=========================================================