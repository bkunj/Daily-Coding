Q.) 404. Sum of Left Leaves 
Link: https://leetcode.com/problems/sum-of-left-leaves/description/ 
Solution:
M-1) DFS TRaversal: Recursion
CODE:
class Solution {
    public int sumOfLeftLeaves(TreeNode root) {
        if (root == null) {
            return 0;
        }
        int sum = 0;
        // Check if the left child is a leaf
        if (root.left != null && root.left.left == null && root.left.right == null) {
            sum += root.left.val;
        } else {
            // Recur for the left child
            sum += sumOfLeftLeaves(root.left);
        }
        // Recur for the right child
        sum += sumOfLeftLeaves(root.right);
        return sum;
    }
}
Time Complexity: O(N), where N=number of nodes, Space Complexity: O(1).
===================
M-2) Using Parent Pointer:

CODE:
class Solution {
    public int sum(TreeNode curr, TreeNode parent) {
        if (curr == null)
            return 0;
        int left = sum(curr.left, curr);
        int right = sum(curr.right, curr);
        int sum = 0;
        if (curr.left == null && curr.right == null) {
            if (parent != null && parent.left == curr)
                sum += curr.val;
        }
        return left + right + sum;
    }
    public int sumOfLeftLeaves(TreeNode root) {
        if (root == null)
            return 0;
        TreeNode parent = null;
        return sum(root, parent);
    }
}
T.C : O(n), S.C : O(1) Auxiliary Space and O(depth of tree) recursion system stack space
===========================
M-3) (without parent pointer, only using a flag)
CODE:
class Solution {
    public int solve(TreeNode curr, boolean isLeft) {
        if (curr == null) {
            return 0;
        }
        if (curr.left == null && curr.right == null && isLeft) {
            return curr.val;
        }
        return solve(curr.left, true) + solve(curr.right, false);
    }
    public int sumOfLeftLeaves(TreeNode root) {
        return solve(root, false);
    }
}
T.C : O(n), S.C : O(1) Auxiliary Space and O(depth of tree) recursion system stack space
===============================================================