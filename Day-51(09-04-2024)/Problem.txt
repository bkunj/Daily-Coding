Q.11) 2073. Time Needed to Buy Tickets
Link: https://leetcode.com/problems/time-needed-to-buy-tickets/description/ 
Solution:
M-1) Brute-Force:
CODE:
class Solution {
    public int timeRequiredToBuy(int[] tickets, int k) {
        int n = tickets.length;
        int t = 0;
        while(true){
            for(int i = 0;i<n;i++){
                if(tickets[i]>0){
                    tickets[i]=tickets[i]-1;
                    t++;
                }
                if(i==k && tickets[i] == 0){
                    return t;
                }
            }
        }
    }
}
Time Complexity: O(n * m)
n: size of array
m : max number within the array
Space Complexity: O(1)
==============
M-2) Optimal
CODE:
class Solution {
    public int timeRequiredToBuy(int[] tickets, int k) {
        int n = tickets.length;
        int value = tickets[k];
        int t = 0;
        for (int i = 0; i < n; i++) {
            if (i < k) {
                t += Math.min(tickets[i], value);
            } else if (i == k) {
                t += value;
            } else {
                if (tickets[i] < value)
                    t += tickets[i];
                else
                    t += value - 1;
            }
        }
        return t;
    }
}
Time Complexity: O(N), Space COmplexity: O(1).
===============================================================