Q.6) 1137. N-th Tribonacci Number
Link: https://leetcode.com/problems/n-th-tribonacci-number/description/ 
Solution: 
M-1) Iterative Method:(Bottom Up Approach):
CODE1:
class Solution {
    public int tribonacci(int n) {
        
        int zero = 0;
        int first = 1;
        int second = 1;
        int ans = 0;
        for(int i = 3;i<=n;i++){
            ans = zero+first+second;
            int temp1 = second;
            int temp2 = first;
            second = ans;
            first = temp1;
            zero = temp2;
        }
        if(n==0) return zero;
        else if(n==1) return first;
        else if(n==2) return second;
        
        return ans;
    }
}
===
Time Complexity: O(N), Space Complexity: O(1).
=============
M-2) Memoization + Recursion:
Here Simple recursion might give you TLS for exponential values of n. Because lots of repetitive work is present which might take a lot of time.
â†’ We can improve it by using memoization to store previously computed values. 
CODE1:
class Solution {
    public int tribonacci(int n) {
        if (n == 0) return 0;
        if (n == 1 || n == 2) return 1;


        int[] memo = new int[n + 1]; // here we can also give hard code value of n--> given in question n max = 38.
        memo[0] = 0;
        memo[1] = 1;
        memo[2] = 1;
       
        return tribonacci(n, memo);
    }
    private int tribonacci(int n, int[] memo) {
        if (n == 0 || memo[n] != 0) return memo[n];
       
        memo[n] = tribonacci(n - 1, memo) + tribonacci(n - 2, memo) + tribonacci(n - 3, memo);
       
        return memo[n];
    }
}
Time Complexity: O(N), Space Complexity: O(N).
===========================================================