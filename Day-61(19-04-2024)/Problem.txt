Q.) 200. Number of Islands
Link: https://leetcode.com/problems/number-of-islands/description/ 
Solution:
M-1) DFS
CODE:
class Solution {
    void dfs(char[][] grid, int i, int j) {
        if(i < 0 || i >= grid.length || j < 0 || j >= grid[0].length || grid[i][j] == '0') {
            return;
        }
        
        if(grid[i][j] == 'v') {
            return;
        }
        
        grid[i][j] = 'v'; // mark visited 

        dfs(grid, i+1, j);
        dfs(grid, i-1, j);
        dfs(grid, i, j+1);
        dfs(grid, i, j-1);
    }
    public int numIslands(char[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int count = 0;
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(grid[i][j] == '1') {
                    dfs(grid, i, j);
                    count++;
                }
            }
        }
        return count;
    }
}
Time Complexity: O(M*N), Space Complexity: O(M*N)
==============
M-2) BFS:
CODE:
class Solution {
    void bfs(char[][] grid, int i, int j) {
    Queue<char[]> queue = new LinkedList<>();
    queue.offer(new char[]{(char)i, (char)j}); // Casting integers i and j to char
    grid[i][j] = 'v';
    
    while (!queue.isEmpty()) {
        char[] it = queue.poll();
        int row = it[0]; // Extracting row index
        int col = it[1]; // Extracting column index

        // Define the directions to explore: down, up, right, left
        int[] dx = {1, -1, 0, 0};
        int[] dy = {0, 0, 1, -1};

        // Explore all four directions
        for (int k = 0; k < 4; k++) {
            int newRow = row + dx[k];
            int newCol = col + dy[k];
            // Checking bounds and if cell is unvisited
            if (newRow >= 0 && newRow < grid.length && newCol >= 0 && newCol < grid[0].length && grid[newRow][newCol] == '1') {
                queue.offer(new char[]{(char)newRow, (char)newCol});
                grid[newRow][newCol] = 'v'; // Mark neighboring cell as visited
            }
        }
    }
}
    public int numIslands(char[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int count = 0;
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(grid[i][j] == '1') {
                    bfs(grid, i, j);
                    count++;
                }
            }
        }
        return count;
    }
}
Time Complexity: O(M*N), Space Complexity: O(M*N)
===============================================================