Q.) 1911. Maximum Alternating Subsequence Sum 
Link: https://leetcode.com/problems/maximum-alternating-subsequence-sum/description/   
===========
M-1)(Recursion + Memo) (Time Complexity - n2  We visit all states of t once)
CODE
public class Solution {
    private long solveMemo(int[] nums, int idx, long[][] dp, int take) {
         Base Case
        if (idx = nums.length) {
            return 0;
        }


         Step-2 = if already Calculated just return it
        if (dp[idx][take] != -1) {
            return dp[idx][take];
        }


         step-3 = if not calculated just calculate it
        if (take == 1) {
            dp[idx][1] = Math.max(solveMemo(nums, idx + 1, dp, 1),
                    nums[idx] + solveMemo(nums, idx + 1, dp, 0));
        } else {
            dp[idx][0] = Math.max(solveMemo(nums, idx + 1, dp, take),
                    solveMemo(nums, idx + 1, dp, take + 1) - nums[idx]);
        }
        return dp[idx][take];
    }
    public long maxAlternatingSum(int[] nums) {
        long[][] dp = new long[nums.length][2];
        for (var d  dp) {
            Arrays.fill(d, -1);
        }
        return solveMemo(nums, 0, dp, 1);
    }
}
====================
M-2) Bottom Up Approach

M-2) DP + Tabulation.
CODE
public class Solution {
    public long maxAlternatingSum(int[] nums) {
        long[][] dp = new long[nums.length][2];
        dp[0][0] = nums[0];
        for (int i = 1; i  nums.length; i++) {
            dp[i][0] = Math.max(dp[i - 1][0], dp[i - 1][1] + nums[i]);
            dp[i][1] = Math.max(dp[i - 1][1], dp[i - 1][0] - nums[i]);
        }
        return Math.max(dp[nums.length - 1][0], dp[nums.length - 1][1]);
    }
}
============
M-3) without extra space
CODE
public class Solution {
    public long maxAlternatingSum(int[] nums) {
        long res = nums[0];
        for (int i = 1; i  nums.length; i++) {
            res += Math.max(nums[i] - nums[i - 1], 0);
        }
        return res;
    }
}
====================================================================