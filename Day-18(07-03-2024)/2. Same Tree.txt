Q.)  Same Tree | Identical Tree or Not:
Link: https://leetcode.com/problems/same-tree/description/?envType=daily-question&envId=2024-02-26 
Solution:
M-1) Using Recursion (any Traversalâ†’ Pre,post, in order)
Code:
class Solution {
    public boolean isSameTree(TreeNode p, TreeNode q) {
        if(p==null && q==null){
            return p==q;
        }
        if(p == null || q == null){
            return false;
        }
        return (p.val==q.val) && (isSameTree(p.left,q.left)) && isSameTree(p.right,q.right);
    }
}
===================
M-2) Using Queue: (BFS Traversal)
CODE;
class Solution {
    public boolean isSameTree(TreeNode p, TreeNode q) {
       Queue<TreeNode> queue1 = new LinkedList<>();
       Queue<TreeNode> queue2 = new LinkedList<>();
       queue1.offer(p);
       queue2.offer(q);
       while(!queue1.isEmpty() && !queue2.isEmpty()){
           if (queue1.size() != queue2.size()) {
                return false;
            }
            int size = queue1.size();
           for(int i = 0;i<size;i++){
              TreeNode node1 = queue1.poll();
              TreeNode node2 = queue2.poll();
                if (node1 == null && node2 == null) {
                    continue;
                }
                if (node1 == null || node2 == null || node1.val != node2.val) {
                    return false;
                }
                queue1.offer(node1.left);
                queue1.offer(node1.right);
                queue2.offer(node2.left);
                queue2.offer(node2.right);
            }
        }
        return queue1.isEmpty() && queue2.isEmpty();
    }
}
