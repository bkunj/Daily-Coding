Q.) 198. House Robber
Link: https://leetcode.com/problems/house-robber/description/ 
Solution:
WHY DP? : - 
We have options to choose from. 
EX: 2,1,3,1,4,5 â†’ here after 2 robber can choose 3 or also can not choose.
                           Or robber can choose next to 3 element.
Optimal Min/Max.
Overlapping Subproblems.

==========
M-1) Recursion + Memoization:

CODE:
public class Solution {
    int[] t = new int[101];
    public int solve(int[] nums, int i, int n) {
        if (i >= n)
            return 0;
       
        if (t[i] != -1)
            return t[i];
       
        int take = nums[i] + solve(nums, i + 2, n); // steals ith house and moves to i+2 (because we can't steal adjacent)
        int skip = solve(nums, i + 1, n); // skips this house, now we can move to adjacent next house
       
        return t[i] = Math.max(take, skip);
    }
    public int rob(int[] nums) {
        int n = nums.length;
        Arrays.fill(t, -1);
        return solve(nums, 0, n);
    }
}
Time Complexity: O(N), Space Complexity:O(N) included recursion stack space.
====================
M-2) Bottom Up Approach:


CODE1:
public class Solution {
    public int rob(int[] nums) {
        int n = nums.length;
        if(n == 1)
            return nums[0];
       
        int[] t = new int[n+1];
        //t[i] = max profit till house i
       
        t[0] = 0;
        t[1] = nums[0];
       
        for(int i = 2; i<=n; i++) {    
            int skip  = t[i-1];
            int steal = nums[i-1] + t[i-2];
            t[i] = Math.max(skip, steal); //max(skip, steal)
                   }
        return t[n];
    }
}
============
CODE2: Space Optimized Bottom Up - Converting Approach-2:
public class Solution {
    public int rob(int[] nums) {
        int n = nums.length;
        int prevPrev = 0;
        int prev     = nums[0];
        for(int i = 2; i<=n; i++) {
            int skip = prev;
           
            int take = nums[i-1] + prevPrev;
               
            int temp = Math.max(skip, take);
           
            prevPrev = prev;
            prev     = temp;
        }
        return prev;
    }
}
Time Complexity:O(N), Space Complexity:O(1).


===============================================================
