Q.) 992. Subarrays with K Different Integers
Link: https://leetcode.com/problems/subarrays-with-k-different-integers/description/ 
Solution:
→ Here we can not use the general sliding windows algorithm.
→ Because as we move forward we lose the previous subarrays which may be useful for future count.
Like for this example general approach works:
Input: nums = [1,2,1,3,4], k = 3 Output: 3 Explanation: Subarrays formed with exactly 3 different integers: [1,2,1,3], [2,1,3], [1,3,4].
But for this example does not work:
Input: nums = [1,2,1,2,3], k = 2 Output: 7 Explanation: Subarrays formed with exactly 2 different integers: [1,2], [2,1], [1,2], [2,3], [1,2,1], [2,1,2], [1,2,1,2]

Now Solution( Improvised Sliding Window):
CODE:
class Solution {
    public int subarraysWithKDistinct(int[] nums, int k) {
        int subArrayAtMostK = subArrayWithAtMostK(nums,k);
        int subArrayAtMostK1 = subArrayWithAtMostK(nums,k-1);
        return subArrayAtMostK - subArrayAtMostK1;
    }
    public int subArrayWithAtMostK(int[] nums, int k) {
        HashMap<Integer,Integer> map = new HashMap<>();
        int left = 0, right = 0, ans = 0;
        while(right<nums.length){
            map.put(nums[right], map.getOrDefault(nums[right], 0) + 1);


            while(map.size() > k){
                 map.put(nums[left], map.get(nums[left]) - 1);
                if (map.get(nums[left]) == 0) {
                    map.remove(nums[left]);
                }
                left++;
            }
            ans += right - left +1; // Size of subarray
            right++;
        }
        return ans;
    }
}
Time Complexity: O(N), Space Complexity: O(N).
================================