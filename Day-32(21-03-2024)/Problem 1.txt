Q.) Reverse Linked List:
Link: https://leetcode.com/problems/reverse-linked-list/description/ 
Solution: 
Iterative Approach:
CODE1:
class Solution {
    public ListNode reverseList(ListNode head) {
         ListNode prev = null;
        ListNode current = head;
        while (current != null) {
            ListNode nextTemp = current.next;
            current.next = prev;
            prev = current;
            current = nextTemp;
        }
        return prev;
    }
}
==================
CODE2:
class Solution {
    public ListNode reverseList(ListNode head) {
        if (head == null || head.next == null)
            return head;
        Stack<ListNode> stack = new Stack<>();
        // Push all nodes onto the stack
        ListNode current = head;
        while (current != null) {
            stack.push(current);
            current = current.next;
        }

        // Pop nodes from the stack and construct the reversed list
        ListNode newHead = stack.pop();
        ListNode temp = newHead;
        while (!stack.isEmpty()) {
            temp.next = stack.pop();
            temp = temp.next;
        }
        temp.next = null; // Set the next of the last node to null to terminate the list

        return newHead;
    }
}

============================
Recursive Approach:
CODE:
class Solution {
    public ListNode reverseList(ListNode head) {
         if (head == null || head.next == null)
            return head;
        ListNode reversed = reverseList(head.next);
        head.next.next = head;
        head.next = null;
        return reversed;
    }
}
