Q.) 1700. Number of Students Unable to Eat Lunch
Link: https://leetcode.com/problems/number-of-students-unable-to-eat-lunch/description/ 
Solution: 
M-1) Brute-Force Solution:
â†’ Just Do What the Question says.
CODE:
class Solution {
    public int countStudents(int[] students, int[] sandwiches) {
        int len = students.length;
        Queue<Integer> studentQueue = new LinkedList<>();
        for(int student : students){
            studentQueue.add(student);
        }
        Stack<Integer> sandwichStack = new Stack<>();
        for(int i = len-1;i>=0;i--){
            sandwichStack.push(sandwiches[i]);
        }
        int served = 0;
        while(!studentQueue.isEmpty() && served<studentQueue.size()){
            if(sandwichStack.peek().equals(studentQueue.peek())){
                sandwichStack.pop();
                studentQueue.poll();
                served = 0;
            }
            else{
                studentQueue.add(studentQueue.peek());
                studentQueue.poll();
                served++;
            }
        }
        return studentQueue.size();
    }
}
Time Complexity: O(N), Space Complexity: O(N).
====================
M-2) Optimal Solution:
The intuition behind the provided solution is to count the number of students preferring square sandwiches (denoted by 1) and circle sandwiches (denoted by 0) separately. Then, iterate through the sandwiches array, serving each sandwich based on the preference count. If there are no more students left who prefer a particular type of sandwich, stop serving that type of sandwich. Finally, return the sum of remaining square and circle sandwich preferences. This approach ensures that all available sandwiches are served to students according to their preferences until no more sandwiches or students remain.
CODE:
class Solution {
    public int countStudents(int[] students, int[] sandwiches) {
        int circleStudentCount = 0, squareStudentCount = 0;
        for (int student : students) {
            if (student == 1)
                squareStudentCount++;
            else
                circleStudentCount++;
        }
        for (int sandwich : sandwiches) {
            if (sandwich == 1) {
                if (squareStudentCount > 0)
                    squareStudentCount--;
                else
                    break;
            }
            if (sandwich == 0) {
                if (circleStudentCount > 0)
                    circleStudentCount--;
                else
                    break;
            }
        }
        return squareStudentCount + circleStudentCount;
    }
}
Time Complexity: O(N), Space Complexity: O(1)

==============================================================