Q.) 402. Remove K Digits
Link: https://leetcode.com/problems/remove-k-digits/description/ 
Solution:
M-1) Using Stack:
import java.util.Stack;
class Solution {
    public String removeKdigits(String num, int k) {
        if (k >= num.length()) {
            return "0";
        }
        Stack<Character> stack = new Stack<>();
        for (char digit : num.toCharArray()) {
            // Remove digits from the stack to form a smaller number
            while (!stack.isEmpty() && k > 0 && stack.peek() > digit) {
                stack.pop();
                k--;
            }
            // Add the current digit to the stack
            stack.push(digit);
        }
        // Remove remaining digits from the end if k > 0
        while (k > 0) {
            stack.pop();
            k--;
        }
        // Build the result string from the stack
        StringBuilder result = new StringBuilder();
        while (!stack.isEmpty()) {
            result.append(stack.pop());
        }
        // Reverse the result because we popped from the stack
        result.reverse();
        // Remove leading zeros
        while (result.length() > 1 && result.charAt(0) == '0') {
            result.deleteCharAt(0);
        }
        return result.toString();
    }
}
Time Complexity:O(N), Space Complexity:O(N).
==================
M-2) Without Stack:
CODE:
class Solution {
    public String removeKdigits(String num, int k) {
        StringBuilder s = new StringBuilder();
        s.append(num.charAt(0));
        for (int i = 1; i < num.length(); ++i) {
            if (k > 0 && s.length() > 0 && num.charAt(i) < s.charAt(s.length() - 1)) {
                s.deleteCharAt(s.length() - 1);
                k--;
                i--;
                continue;
            }
            s.append(num.charAt(i));
        }
        while (k > 0 && s.length() > 0) {
            s.deleteCharAt(s.length() - 1);
            k--;
        }
        while (s.length() > 0 && s.charAt(0) == '0') {
            s.deleteCharAt(0);
        }
        if (s.length() == 0) {
            s.append('0');
        }
        return s.toString();
    }
}
Time Complexity:O(N), Space Complexity:O(1).

==============================================================