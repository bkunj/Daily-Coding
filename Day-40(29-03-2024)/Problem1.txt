Q.42) 2962. Count Subarrays Where Max Element Appears at Least K Times
Link: https://leetcode.com/problems/count-subarrays-where-max-element-appears-at-least-k-times/description/ 
Solution:
M-1) Brute-Force Method:
â†’ Compute all possible subarrays and check for count.
Time Complexity: O(N*N*N), Space Complexity: O(1)
CODE:
public class SubarraysWithKMaxElement {
   
    public static int countSubarrays(int[] arr, int k) {
        int n = arr.length;
        int result = 0;
       
        for (int i = 0; i < n; i++) {
            int max = Integer.MIN_VALUE;
            for (int j = i; j < n; j++) {
                max = Math.max(max, arr[j]);
                if (countOccurrences(arr, max) >= k) {
                    result++;
                }
            }
        }
       
        return result;
    }
   
    public static int countOccurrences(int[] arr, int target) {
        int count = 0;
        for (int num : arr) {
            if (num == target) {
                count++;
            }
        }
        return count;
    }
   
    public static void main(String[] args) {
        int[] arr = {2, 1, 2, 1, 3};
        int k = 2;
        System.out.println("Number of subarrays where max element appears at least " + k + " times: " + countSubarrays(arr, k));
    }
}


================================
M-2) Optimize Brute-Force:
CODE:
import java.util.Arrays;


public class SubarraysWithKMaxElement {


    public static int countSubarrays(int[] arr, int k) {
        int n = arr.length;
        int result = 0;


        // Precompute maximum occurrences for each index
        int[] maxOccurrences = new int[n];
        for (int i = 0; i < n; i++) {
            int max = Integer.MIN_VALUE;
            int maxCount = 0;
            for (int j = i; j < n; j++) {
                max = Math.max(max, arr[j]);
                if (arr[j] == max) {
                    maxCount++;
                }
                maxOccurrences[j] = maxCount;
            }
        }


        // Count subarrays where max element appears at least k times
        for (int i = 0; i < n; i++) {
            for (int j = i; j < n; j++) {
                int maxCount = maxOccurrences[j] - (i > 0 ? maxOccurrences[i - 1] : 0);
                if (maxCount >= k) {
                    result++;
                }
            }
        }


        return result;
    }


    public static void main(String[] args) {
        int[] arr = {2, 1, 2, 1, 3};
        int k = 2;
        System.out.println("Number of subarrays where max element appears at least " + k + " times: " + countSubarrays(arr, k));
    }
}
Time Complexity: O(N*N), Space Complexity: O(1)
===========
M-3) Sliding Window:
CODE:
import java.util.*;


class Solution {
    public long countSubarrays(int[] nums, int k) {
        long maxNum = Long.MIN_VALUE, count = 0;
        long left = 0, right = 0, ans = 0;
        
        // Find the maximum element in the array
        for (int num : nums) {
            maxNum = Math.max(maxNum, num);
        }
        
        while (right < nums.length || left > right) {
            if (nums[(int)right] == maxNum) {
                count++;
            }
            // If count is greater than or equal to k, calculate subarrays count
            while (count >= k) {
                if (nums[(int)left] == maxNum) {
                    count--;
                }
                left++;
                ans += nums.length - right;
            }
            right++;
        }
        return ans;
    }
}
Time Complexity: O(N) Space Complexity: O(1)
