Question 1: Search Insert Position
URL: https://leetcode.com/problems/search-insert-position/description/ 
Ans:
Method-1) Brure-Force Approach: 
--> We can traverse linearly the array and find the answer.
Time Complexity: O(N).

Method-2)(Optimal) Using Binary Search:
--> First we can use binary search to find the element and if element present then we can return the index of than element.
--> If element is not present in the array then we can use return the upperBound of the targeted value.
--> -> Upper Bound (x) = Returns index of the number which is just greater than x and as close as possible to x.

Time Complexity: O(2log(N)),  one logN for binary search and other logN is for Upper bound. However we can optimize the 2log(N) into log(N).

CODE: 
class Solution {

    public int upperBound(int[] nums, int target){
        int l=0;
        int r=nums.length-1;
       int ub = -1;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if (nums[mid] < target) {
                l = mid + 1;
            } else if (nums[mid] > target) {
                r = mid - 1;
                ub = mid;
            } else {
                ub = mid;
                r = mid - 1;
            }
        }
        if(ub==-1) return nums.length;
        return ub;
    }
    public int searchInsert(int[] nums, int target) {
        int l = 0, r = nums.length-1;
        while(l<=r){
            int mid = l + (r-l)/2;
            if(nums[mid]==target){
                return mid;
            }
            else if(nums[mid]>target){
                r=mid-1;
            }
            else {
                l = mid+1;
            }
        }
        return upperBound(nums,target);
    }
}

===========================================================================================================================================================================
Question 2: Koko Eating Bananas
URL: https://leetcode.com/problems/koko-eating-bananas/description/ 
Ans: 
Method-1) Brure-Force Approach: 
--> We can traverse linearly from 1 to maxElementInArray, By considering these numbers are hours from 1 to maxElementInArray.
--> For each hours, traverse the array and compute the hours to eat total bananas.
--> If hours is greater than the given hours then traverse again.
--> Traverse until we find the first hours==given hour, then stop==> because if minimum hours satisfy the condition then after that also satisfies the condition as well.

Time Complexity: O(N*M), where M =  maxElementInArray.

Method-2)(Optimal) Using Binary Search:
piles = [3,6,7,11], h = 8
Output: 4
--> For Binary Search we have to define the search space.
Search Space would be = 1 to maxElementInArray.
Why 1 to maxElementInArray?==> because in above example is 4 , but it could be 1,2,3....11. not exceet 11 because Koko can eat max to one pile of bananas at one time and that is maximum element of that array.
--> Now,We can use Binary search from 1 to maxElementInArray. and minimum/initial hour = 1
--> For each mid, traverse the array and compute the hoursSum to eat total bananas.
--> If hours is greater than the given hours then traverse again.
--> Traverse until we find the first hours==given hour, then stop==> because if minimum hours satisfy the condition then after that also satisfies the condition as well.

// For Better Understandig DRY-RUN the given code.

Time Complexity: O(N*log(M)), where M =  maxElementInArray.
CODE:
class Solution {

    public int minEatingSpeed(int[] piles, int h) {
        int left=1;
        int max=piles[0];
        for(int val:piles)
        {
            max=Math.max(max,val);
        }
        int minHoursToEat=-1;
        int right=max;
        while(left<=right)
        {
            int mid=left+(right-left)/2;
            long hoursSum = 0;
            for(int i=0;i<piles.length;i++){
                hoursSum=hoursSum+(int)Math.ceil((piles[i]*1.0)/mid);
            }
            if(hoursSum<=h){
                minHoursToEat=mid;
                right=mid-1;
            }
            else{
                left=mid+1;
            }
        }
        return minHoursToEat;
    }
}
