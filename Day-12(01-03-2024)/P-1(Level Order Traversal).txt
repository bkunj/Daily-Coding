BFS TRaversal (Level Order Traversal):
URL: https://leetcode.com/problems/binary-tree-level-order-traversal/description/ 

Algorithm:
--> Create a queue data structure of TreeNode Type
--> Create an List of List Data structure called ans, which is going to store the answers.
--> add parent/head root into the queue.
--> Now traverse the queue untill it is not empty using Loops
    ---> Inside Loops --> create a temp arrayList data structure.
                      --> runs another loops of the size of the queue
					--> And Check if queue.peek.left exist add them into temp list.
					--> if queue.peek.right exist add them into list.
					--> Then remove the peek elements from the queue
		      --> Now Add temp list into the ans variable.
--> return ans.


Time Complexity: O(N)  
Space Complexity: O(N) , where N = no. of nodes.

Code:
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> ans = new ArrayList<>();
        Queue<TreeNode> queue = new LinkedList<>();

        if(root==null){
            return ans;
        }
        queue.offer(root);
        while(!queue.isEmpty()){
            int n = queue.size();
            List<Integer> subans = new ArrayList<>();
            for(int i=0;i<n;i++){
                if(queue.peek().left!=null) queue.offer(queue.peek().left);
                if(queue.peek().right!=null) queue.offer(queue.peek().right);
                subans.add(queue.poll().val);
            }
            ans.add(subans);
        }
        return ans;
    }
} 