Question 01: Median of two Sorted array
URL: https://leetcode.com/problems/median-of-two-sorted-arrays/description/ 
Ans: 
Brute-Force Method: 
--> Merge both array and store it into a new array.
--> Sort them.
---> Find median.

Time Complexity: O(M+N) + O((M+N)log(M+N))
Space Complexity: O(M+N).

==========
Better Approach: (Using Two Pointer)
--> Using Two Pointer Merge them --> move the pointer correspondence to the smaller value forward at each step.
--> And during traversing also store it into a new array of size (M+N)
---> Find median.

Time Complexity: O(M+N)
Space Complexity: O(M+N).

CODE:
class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int m = nums1.length;
        int n = nums2.length;
        int i = 0;
        int j = 0;
        double median=0;
        List<Integer> arr = new ArrayList<>();
        while(i<nums1.length && j<nums2.length){
            if(nums1[i]<nums2[j]){
                arr.add(nums1[i]);
                i++;
            }
            else if(nums1[i]>nums2[j]){
                arr.add(nums2[j]);
                j++;
            }
            else{
                arr.add(nums1[i]);
                arr.add(nums2[j]);
                i++;
                j++;
            }
        }
        while(i<nums1.length){
             arr.add(nums1[i]);
             i++;
        }
        while(j<nums2.length){
             arr.add(nums2[j]);
             j++;
        }
        if((m+n)%2==0){
            median = (double)(arr.get((m+n)/2) + arr.get(((m+n)/2)-1))/2;
        }
        else median = arr.get((m+n)/2);

        return median;
    }
}
=======
Optimize Better Approach: (Using Two Pointer)
--> Using Two Pointer Merge them --> move the pointer correspondence to the smaller value forward at each step.
--> Continue moving the pointers until you have processed half of the total number of elements.
---> Find median.

Time Complexity: O(M+N)
Space Complexity: O(M+N).

CODE:
class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int m = nums1.length;
        int n = nums2.length;
        int i = 0, j = 0, m1 = 0, m2 = 0;
        double median=0;

        // Find median.
        for (int count = 0; count <= (n + m) / 2; count++) {
            m2 = m1;
            if (i != m && j != n) {
                if (nums1[i] > nums2[j]) {
                    m1 = nums2[j++];
                } else {
                    m1 = nums1[i++];
                }
            } else if (i < m) {
                m1 = nums1[i++];
            } else {
                m1 = nums2[j++];
            }
        }

        if((m+n)%2==0){
            median = (double)(m1 + m2)/2;
        }
        else median = (double)m1;;

        return median;
    }
}
======================
Optimal Approach: Using Binary Search.
----
--> Why Binary Search --> Since arrays are sorted so than we can think of Binary Search.
--> Basic intution of binary search to find the search space(left/low to right/high) and mid.
--> Here we also do the same.
--> To optimize complexity we choose the minimun length of array where we apply the binary search.
--> Main Intution
      --> find out correct left half and correct right half
          i.e :  7 ,  || 12 , 14 , 15  --> parition it
                   1 , 2 , 3 , 4 , || 9 , 11  --> parition it
                    Now just findout max(left1,left2), min(right1,right2);

Time Complexity: O(log(min(n1,n2))), Since we are using minimum length array for Binary Search.
Space Complexity: O(1).


CODE:
class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
       int n1 = nums1.length, n2 = nums2.length;
        //Try to make n1 as smaller.
        if (n1 > n2) return findMedianSortedArrays(nums2, nums1);

        int n = n1 + n2;
        int left = (n1 + n2 + 1) / 2; //length of left half
        //binary search:
        int low = 0, high = n1;
        while (low <= high) {
            int mid1 = (low + high) / 2; // (low+high)>>1
            int mid2 = left - mid1;
            //calculate l1, l2, r1 and r2;
            int l1 = (mid1 > 0) ? nums1[mid1 - 1] : Integer.MIN_VALUE;
            int l2 = (mid2 > 0) ? nums2[mid2 - 1] : Integer.MIN_VALUE;
            int r1 = (mid1 < n1) ? nums1[mid1] : Integer.MAX_VALUE;
            int r2 = (mid2 < n2) ? nums2[mid2] : Integer.MAX_VALUE;

            if (l1 <= r2 && l2 <= r1) {
                if (n % 2 == 1) return Math.max(l1, l2);
                else return ((double) (Math.max(l1, l2) + Math.min(r1, r2))) / 2.0;
            } else if (l1 > r2) high = mid1 - 1;
            else low = mid1 + 1;
        }
        return 0; // Aise hi
    }
}

