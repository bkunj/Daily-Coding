Q.) 129. Sum Root to Leaf Numbers
Link: https://leetcode.com/problems/sum-root-to-leaf-numbers/description/ 
Solution: 
         4
      9      0
   5     1  
sumNumbers(root) --> return sumNumberHelper(root,0);
int currentSum=0;
int newSum=0;
newSum = currentSum*10 + root.val;
at 4 == newSum = 0*0 + 4; ==> 4;
at 9 == newSum = 4*10 + 9 ==> 49;
at 5 == newSum = 49*10 + 5 ==> 495;
here 5.left and 5.right == null; --> return  (newSum)-->495; ==> leftSum;

then backTrack, Now pointer at 9 then pointer goes to 1.
at 1 == newSum = 49*10 + 1 ==> 491;
here 1.left and 1.right == null; --> return (newSum) --> 491; ==> rightSum;

again backTrack, Now pointer at 9 with ==> since we traverse 9th left and right child both
==> again backTrack, by returning leftSum+rightSum = 495+491 ==> 986.
Now pointer at 4 and for 4 the leftSum = 986;

at 4 --> newSum = 0*0 + 4 = 4;
then goes to 0; 
at 0 == newSum = 4*10 + 0 = 40;
here 1.left and 1.right == null; --> return newSum--> 40 = rightSum for 4.

final return 986+40 ==> 1026. ==> answer.
CODE1:
class Solution {
    int sum = 0;
    public int sumNumbers(TreeNode root) {
        sumNumbersHelper(root, 0);
        return sum;
    }
    
    private void sumNumbersHelper(TreeNode root, int currentSum) {
        if (root == null) return;
        
        int newSum = currentSum * 10 + root.val;
        
        if (root.left == null && root.right == null) {
            sum += newSum;
            return;
        }
        
        sumNumbersHelper(root.left, newSum);
        sumNumbersHelper(root.right, newSum);
    }
}
CODE2:
class Solution {
    public int sumNumbers(TreeNode root) {
        return sumNumbersHelper(root, 0);
    }
    private int sumNumbersHelper(TreeNode root, int currentSum) {
        if (root == null) return 0;
        // Calculate the current sum by adding the current node's value
        // to the sum of the path formed so far
        int newSum = currentSum * 10 + root.val;
        // If it's a leaf node, return the sum formed by this path
        if (root.left == null && root.right == null) {
            return newSum;
        }
        // Recursively calculate the sum for left and right subtrees
        int leftSum = sumNumbersHelper(root.left, newSum);
        int rightSum = sumNumbersHelper(root.right, newSum);
        // Return the sum of both subtrees
        return leftSum + rightSum;
    }
}
Time Complexity: O(N), Where N= Number of nodes.
Space Complexity: O(1), Auxiliary Space, 
Recursion System stack space = O(logN) == O(H) == Height of binary tree.

===============================================================