Q.) 41. First Missing Positive
Link: https://leetcode.com/problems/first-missing-positive/description/ 
Solution: 
M-1) Brute-Force: 
→ check from 1 to N for every element of the array.
Time Complexity: O(N*N), Space Complexity: O(1).
==============
M-2) Sort + Binary Search:
CODE:
import java.util.Arrays;
public class Solution {
    public boolean search(int k, int[] v) {
        int i = 0, j = v.length - 1;
        while (i <= j) {
            int m = (i + j) / 2;
            if (k == v[m])
                return false;
            if (k > v[m])
                i = m + 1;
            else
                j = m - 1;
        }
        return true;
    }


    public int firstMissingPositive(int[] v) {
        Arrays.sort(v);
        int n = v.length;
        for (int i = 1; i <= 100001; i++) {
            if (search(i, v))
                return i;
        }
        return 0;
    }
}
Time Complexity: O(N*logN), Space Complexity: O(1)
============
M-3) Using Hashing(HashSet):
→ Run a for loop to store all elements inside HashSet and find the maximum element.
→ Run another for loop from i=1 to maximum.
→ if i not present in HashSet that will be the minimum Integer.
→ For base case check code.
CODE:
class Solution {
    public int firstMissingPositive(int[] nums) {
        HashSet<Integer> set = new HashSet<>();
        int maxi = Integer.MIN_VALUE;
        int ans=0;
        for(int i=0;i<nums.length;i++){
            if(nums[i]>maxi) maxi = nums[i];
            set.add(nums[i]);
        }
        for(int i=1;i<=maxi;i++){
            if(!set.contains(i)) {
                ans = i;
                break;
            }
        }
        if(maxi<0) return 1;
        else if(ans==0) return maxi+1;
        return ans;
    }
}
Time Complexity: O(N), Space Complexity: O(N)
===================================================
M-4) Using Boolean Array:
CODE:
class Solution {
    public int firstMissingPositive(int[] nums) {
        int n = nums.length;
        boolean[] seen = new boolean[n + 1]; // Array for lookup
        // Mark the elements from nums in the lookup array
        for (int num : nums) {
            if (num > 0 && num <= n) {
                seen[num] = true;
            }
        }
        // Iterate through integers 1 to n
        // return smallest missing positive integer
        for (int i = 1; i <= n; i++) {
            if (!seen[i]) {
                return i;
            }
        }
        // If seen contains all elements 1 to n
        // the smallest missing positive number is n + 1
        return n + 1;
    }
}
Time Complexity: O(N), Space Complexity: O(N). → (better than M-3.)
============================================
M-5) Optimal: Using Cyclic Sort:
→ Cyclic Sort: It works when we have a fixed range. → [1,N]
→ In our case we are ignoring 0 and -ve numbers.
→ Our Range: [1,10^5+1].
CODE:
public class Solution {
    public int firstMissingPositive(int[] nums) {
        int n = nums.length;
        // Use cycle sort to place positive elements smaller than n
        // at the correct index
        int i = 0;
        while (i < n) {
            if (nums[i] > 0 && nums[i] <= n && nums[i] != nums[nums[i] - 1]) {
                int temp = nums[i];
                nums[i] = nums[temp - 1];
                nums[temp - 1] = temp;
            } else {
                i++;
            }
        }
        // Iterate through nums
        // return smallest missing positive integer
        for (i = 0; i < n; i++) {
            if (nums[i] != i + 1) {
                return i + 1;
            }
        }
        // If all elements are at the correct index
        // the smallest missing positive number is n + 1
        return n + 1;
    }
}
Time Complexity: O(N), Space Complexity: O(1).
=================================================