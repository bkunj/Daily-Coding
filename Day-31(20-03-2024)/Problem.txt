Q.) 1457. Pseudo-Palindromic Paths in a Binary Tree
Link: https://leetcode.com/problems/pseudo-palindromic-paths-in-a-binary-tree/description/ 
Solution: 
Approach 1
Use a depth-first search (DFS) with a stack to traverse the binary tree.
Maintain a path variable to keep track of the occurrences of each digit using bitwise XOR.
If a leaf node is reached, check if the current path is pseudo-palindromic.
Pseudo-palindromic path condition: At most one digit should have an odd frequency.
Use bitwise operations to efficiently handle digit occurrences.
Increment the count if the pseudo-palindromic condition is satisfied.
Complexity
Time complexity:
O(n)
Space complexity:
O(n)

CODE:
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */


import java.util.Stack;


class Solution {
    public int pseudoPalindromicPaths(TreeNode root) {
        int count = 0, path = 0;
        Stack<Pair<TreeNode, Integer>> stack = new Stack<>();
        stack.push(new Pair<>(root, 0));
        while (!stack.isEmpty()) {
            Pair<TreeNode, Integer> p = stack.pop();
            TreeNode node = p.getKey();
            path = p.getValue();
            if (node != null) {
                path = path ^ (1 << node.val);


                if (node.left == null && node.right == null) {
                    if ((path & (path - 1)) == 0) {
                        ++count;
                    }
                } else {
                    stack.push(new Pair<>(node.right, path));
                    stack.push(new Pair<>(node.left, path));
                }
            }
        }
        return count;
    }
}
===========
Approach 2
The function pseudoPalindromicPaths is the main entry point. It initializes the count of pseudo-palindromic paths and starts the recursive traversal.
The recursive helper function countPseudoPalindromicPaths is called with the current node and the XOR path value.
The XOR path is used to keep track of the occurrences of each digit in the current path.
If the current node is null, return 0 as there are no paths to consider.
XOR the current path with the value of the current node using path ^= (1 << node->val).
If the current node is a leaf (both left and right are null), check if the path is pseudo-palindromic. If yes, return 1, otherwise return 0.
Recursively calculate the count for the left and right subtrees by calling countPseudoPalindromicPaths with updated path values.
Return the sum of counts from the left and right subtrees.
CODE:
class Solution {
    public int pseudoPalindromicPaths(TreeNode root) {
        return countPseudoPalindromicPaths(root, 0);
    }
    private int countPseudoPalindromicPaths(TreeNode node, int path) {
        if (node == null) {
            return 0;
        }
        path ^= (1 << node.val);
        if (node.left == null && node.right == null) {
            return (path & (path - 1)) == 0 ? 1 : 0;
        }
        return countPseudoPalindromicPaths(node.left, path) + countPseudoPalindromicPaths(node.right, path);
    }
}

Complexity
Time complexity:
O(n)
Space complexity:
O(n)
