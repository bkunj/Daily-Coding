Q.) 441. Arranging Coins 
Link: https://leetcode.com/problems/arranging-coins/description/ 
Solution:
===============
M-1) Brute-Force:
→ Linear Traverse 
→ we can traverse 1 to N by maintaining a variable called sum which would be increasing by i in every iteration. And also use the count variable to count++, if sum<N.
Or if we do not want to use the sum variable then at every iteration we can simply compare N with i(i+1)/2 value; → This gives the idea of an optimal solution(Binary Search). See (M-2) below.
Time COmplexity: O(N), Space Complexity: O(1).
===============
M-2) Using Binary Search:
→ By observation if we see the series → It will be the monotonically increasing series. Means if we are at ith position it will be always greater than any which is less than ith positioned value.
Ex: 1 < 3 < 6 < 10 < 15 < <………etc.

CODE: 
class Solution {
    public int arrangeCoins(int n) {
        int start=0,end=n;
        int ans=0;
        while(start<=end){
            int mid = start+(end-start)/2;
            long sum = (long) mid * (mid + 1) / 2;
            if(sum<=n){
                ans=mid;
                start=mid+1;
            }
            else {
                end=mid-1;
            }
        }
        return ans;
    }
}
Time Complexity: O(Nlog(N)), Space Complexity: O(1).
=====================================