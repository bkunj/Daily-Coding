Q.) 621. Task Scheduler:
Link: https://leetcode.com/problems/task-scheduler/description/ 
Solution:
Optimized Task Scheduling with Cooling Time Constraint: A Greedy Approach 
Intuition
To solve this problem efficiently, we aim to prioritize tasks with higher frequencies while respecting the cooling time constraint. By identifying the tasks' frequencies and organizing them accordingly, we can optimize the scheduling process.

Approach
Count the frequency of each task using an array.
Sort the frequencies in descending order to prioritize tasks with higher frequency.
Calculate the number of intervals needed based on the task 4. with the maximum frequency, considering the cooling time constraint.
Return the total number of intervals required.
Complexity
Time complexity:O(n)
Counting task frequencies: O(n), where n is the number of tasks.
Sorting the frequency array: O(26 log 26) ≈ O(1)
Loop to calculate intervals: O(26) ≈ O(1)
Overall: O(n + 1) ≈ O(n)
Space complexity:Array for frequency: O(26) ≈ O(1)

CODE:
import java.util.Arrays;
class Solution {
    public int leastInterval(char[] tasks, int n) {
        int[] freq = new int[26];
        for (char task : tasks) {
            freq[task - 'A']++;
        }
        Arrays.sort(freq);
        int chunk = freq[25] - 1;
        int idle = chunk * n;
        for (int i = 24; i >= 0; i--) {
            idle -= Math.min(chunk, freq[i]);
        }
        return idle < 0 ? tasks.length : tasks.length + idle;
    }
}

